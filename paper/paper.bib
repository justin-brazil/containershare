@MISC{Docker-hub,
  title        = "Docker Hub",
  howpublished = "\url{https://hub.docker.com/}",
  note         = "Accessed: 2015-11-4"
}


@ARTICLE{Da_Veiga_Leprevost2017-xx,
  title    = "{BioContainers}: an open-source and community-driven framework
              for software standardization",
  author   = "da Veiga Leprevost, Felipe and Gr{\"u}ning, Bj{\"o}rn A and Alves
              Aflitos, Saulo and R{\"o}st, Hannes L and Uszkoreit, Julian and
              Barsnes, Harald and Vaudel, Marc and Moreno, Pablo and Gatto,
              Laurent and Weber, Jonas and Bai, Mingze and Jimenez, Rafael C
              and Sachsenberg, Timo and Pfeuffer, Julianus and Vera Alvarez,
              Roberto and Griss, Johannes and Nesvizhskii, Alexey I and
              Perez-Riverol, Yasset",
  abstract = "Motivation: BioContainers (biocontainers.pro) is an open-source
              and community-driven framework which provides platform
              independent executable environments for bioinformatics software.
              BioContainers allows labs of all sizes to easily install
              bioinformatics software, maintain multiple versions of the same
              software and combine tools into powerful analysis pipelines.
              BioContainers is based on popular open-source projects Docker and
              rkt frameworks, that allow software to be installed and executed
              under an isolated and controlled environment. Also, it provides
              infrastructure and basic guidelines to create, manage and
              distribute bioinformatics containers with a special focus on
              omics technologies. These containers can be integrated into more
              comprehensive bioinformatics pipelines and different
              architectures (local desktop, cloud environments or HPC
              clusters). Availability and Implementation: The software is
              freely available at github.com/BioContainers/. Contact:
              yperez@ebi.ac.uk.",
  journal  = "Bioinformatics",
  volume   =  33,
  number   =  16,
  pages    = "2580--2582",
  month    =  aug,
  year     =  2017,
  language = "en"
}

@MISC{noauthor_undated-vt,
  title       = "{GitHub} Pages",
  abstract    = "Websites for you and your projects, hosted directly from your
                 GitHub repository. Just edit, push, and your changes are live.",
  institution = "Github"
}

@ARTICLE{Ram2013-km,
  title       = "Git can facilitate greater reproducibility and increased
                 transparency in science",
  author      = "Ram, Karthik",
  affiliation = "Environmental Science, Policy, and Management, University of
                 California, Berkeley, Berkeley, CA 94720, USA.
                 karthik.ram@berkeley.edu.",
  abstract    = "BACKGROUND: Reproducibility is the hallmark of good science.
                 Maintaining a high degree of transparency in scientific
                 reporting is essential not just for gaining trust and
                 credibility within the scientific community but also for
                 facilitating the development of new ideas. Sharing data and
                 computer code associated with publications is becoming
                 increasingly common, motivated partly in response to data
                 deposition requirements from journals and mandates from
                 funders. Despite this increase in transparency, it is still
                 difficult to reproduce or build upon the findings of most
                 scientific publications without access to a more complete
                 workflow. FINDINGS: Version control systems (VCS), which have
                 long been used to maintain code repositories in the software
                 industry, are now finding new applications in science. One
                 such open source VCS, Git, provides a lightweight yet robust
                 framework that is ideal for managing the full suite of
                 research outputs such as datasets, statistical code, figures,
                 lab notes, and manuscripts. For individual researchers, Git
                 provides a powerful way to track and compare versions, retrace
                 errors, explore new approaches in a structured manner, while
                 maintaining a full audit trail. For larger collaborative
                 efforts, Git and Git hosting services make it possible for
                 everyone to work asynchronously and merge their contributions
                 at any time, all the while maintaining a complete authorship
                 trail. In this paper I provide an overview of Git along with
                 use-cases that highlight how this tool can be leveraged to
                 make science more reproducible and transparent, foster new
                 collaborations, and support novel uses.",
  journal     = "Source Code Biol. Med.",
  volume      =  8,
  number      =  1,
  pages       = "7",
  month       =  feb,
  year        =  2013,
  language    = "en"
}

@ARTICLE{Sochat2017-ud,
  title    = "Enhancing reproducibility in scientific computing: Metrics and
              registry for Singularity containers",
  author   = "Sochat, Vanessa V and Prybol, Cameron J and Kurtzer, Gregory M",
  abstract = "Here we present Singularity Hub, a framework to build and deploy
              Singularity containers for mobility of compute, and the
              singularity-python software with novel metrics for assessing
              reproducibility of such containers. Singularity containers make
              it possible for scientists and developers to package reproducible
              software, and Singularity Hub adds automation to this workflow by
              building, capturing metadata for, visualizing, and serving
              containers programmatically. Our novel metrics, based on custom
              filters of content hashes of container contents, allow for
              comparison of an entire container, including operating system,
              custom software, and metadata. First we will review Singularity
              Hub's primary use cases and how the infrastructure has been
              designed to support modern, common workflows. Next, we conduct
              three analyses to demonstrate build consistency, reproducibility
              metric and performance and interpretability, and potential for
              discovery. This is the first effort to demonstrate a rigorous
              assessment of measurable similarity between containers and
              operating systems. We provide these capabilities within
              Singularity Hub, as well as the source software
              singularity-python that provides the underlying functionality.
              Singularity Hub is available at https://singularity-hub.org, and
              we are excited to provide it as an openly available platform for
              building, and deploying scientific containers.",
  journal  = "PLoS One",
  volume   =  12,
  number   =  11,
  pages    = "e0188511",
  month    =  nov,
  year     =  2017,
  language = "en"
}


@ARTICLE{Merkel2014-da,
  title     = "Docker: Lightweight Linux Containers for Consistent Development
               and Deployment",
  author    = "Merkel, Dirk",
  journal   = "Linux J.",
  publisher = "Belltown Media",
  volume    =  2014,
  number    =  239,
  month     =  mar,
  year      =  2014,
  address   = "Houston, TX"
}


@MISC{noauthor_undated-hl,
  title       = "container-diff",
  abstract    = "container-diff: Diff your Docker containers",
  institution = "Github"
}


@MISC{noauthor_undated-nt,
  title        = "Continuous Integration and Deployment",
  abstract     = "Hosted Continuous Integration for web applications. Set up
                  your application for testing in one click, on the fastest
                  testing platform on the internet.",
  howpublished = "\url{https://circleci.com/dashboard}",
  note         = "Accessed: 2018-8-4"
}
